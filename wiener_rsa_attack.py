C = [47406263192693509, 51065178201172223, 30260565235128704, 82385963334404268,
     8169156663927929, 47406263192693509, 178275977336696442, 134434295894803806,
     112111571835512307, 119391151761050882, 30260565235128704, 82385963334404268,
     134434295894803806, 47406263192693509, 45815320972560202, 174632229312041248,
     30260565235128704, 47406263192693509, 119391151761050882, 57208077766585306,
     134434295894803806, 47406263192693509, 119391151761050882, 47406263192693509,
     112111571835512307, 52882851026072507, 119391151761050882, 57208077766585306,
     119391151761050882, 112111571835512307, 8169156663927929, 134434295894803806,
     57208077766585306, 47406263192693509, 185582105275050932, 174632229312041248,
     134434295894803806, 82385963334404268, 172565386393443624, 106356501893546401,
     8169156663927929, 47406263192693509, 10361059720610816, 134434295894803806,
     119391151761050882, 172565386393443624, 47406263192693509, 8169156663927929,
     52882851026072507, 119391151761050882, 8169156663927929, 47406263192693509,
     45815320972560202, 174632229312041248, 30260565235128704, 47406263192693509,
     52882851026072507, 119391151761050882, 111523408212481879, 134434295894803806,
     47406263192693509, 112111571835512307, 52882851026072507, 119391151761050882,
     57208077766585306, 119391151761050882, 112111571835512307, 8169156663927929,
     134434295894803806, 57208077766585306]

N = 194749497518847283
e = 50736902528669041


def continuous_frac(n, d):
    a = []

    q = n // d
    r = n % d
    a.append(q)
    while r != 0:
        n, d = d, r
        q = n // d
        r = n % d
        a.append(q)
    return a


def convergents(e):
    n = []
    d = []

    for i in range(len(e)):
        if i == 0:
            ni = e[i]
            di = 1
        elif i == 1:
            ni = e[i] * e[i - 1] + 1
            di = e[i]
        else:  # i > 1
            ni = e[i] * n[i - 1] + n[i - 2]
            di = e[i] * d[i - 1] + d[i - 2]

        n.append(ni)
        d.append(di)
    return n, d


def modular_exp(a, b, n):
    if n == 1:
        return 0
    res = 1
    while b:
        if b & 1:
            res = (res * a) % n
        b >>= 1
        a = (a ** 2) % n
    return res


def wiener_attack(N, e):
    frac = continuous_frac(e, N)
    n, D = convergents(frac)
    d = None
    for i in range(len(frac)):
        if modular_exp(2, int(e * D[i]), N) == 2:
            d = D[i]
    if d is None:
        print('Failed to find d (sk)')
        return False
    return d


d = wiener_attack(N, e)

message = ''
for c in C:
    message += chr(modular_exp(c, d, N))
print(message)
